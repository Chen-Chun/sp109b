[common]
; 绑定
bind        = 0.0.0.0
; 授权码，程序运行后，将Machine ID值发给客服进行授权
license     = 
; http_api 是否开启http_api功能, 需要开启http或https服务
http_api    = 1
; admin_panel 是否开启后台管理面板, 会自动开启http_api,但需要开启http或https服务
admin_panel = 1
; notify_url 当流创建和结束时以POST方式通知到该url，参数将以json body传递,当通知创建时返回非200状态码，将中断该流
; notify_url  = http://192.168.0.6:8008/notify
; notify_method 可以配置通知采用那种方式, 默认是post, 可改为get, 参数将通过url传递
; notify_method = post

; gop_cache 是否开启gop_cache
; 该功能缓存最近的一段以关键帧开始的视频，使客户端能立刻开始解码秒开画面。
; 但在服务端有大量推流时需要更多的内存, 根据 码率×原视频关键帧间隔×推流数来计算。
gop_cache   = 1
; web_root 提供/路径静态访问
web_root    = ./html

[log]
; trace, debug, info, warn, error
log_level  = debug
; console or real log file path like ./log/debug.log
log_file   = console
; log max day
log_maxday = 7

[av]
; ======== 实时音频转码 ==========
; 是否开启自动音频转码
; RTMP/FLV/KMP/HLS协议播放自动转其它音频编码为AAC
transcode_audio = 1
; ======== 推流音视频内容加密 ==========
; 视频加密后,rtmp/kmp/http-flv/websocket-flv协议支持, HLS协议不支持
; 支持开启transcode_audio后转码为AAC的流
; 暂不支持帧内多层编码的流,x264 编码设置zerolatency时,需要额外设置 -x264-params sliced-threads=0
; 暂只支持H264+AAC的流
; 16字节密码,任意字符串
; crypto_key      = qwerty1234567890
; 对哪些流进行加密的规则, app_name/stream_name , 可以用*通配 , 多个规则用|分隔
; 默认为 */* 表示所有推流都加密, live/* 则表示只有 app_name为live时才加密
; 客户端只能使用NodeMediaClient-Android/iOS, NodePlayer.js 解密播放
crypto_rule     = */*
; ======== 推流截图 ==========
; 截图保存路径
; screenshot_path     = ./screenshot
; 截图文件名类型,默认不设置则可通过流名称直接访问截图,也可设置为time按截图时间保存所有截图
; http://server_ip:8000/screenshot/live/stream.jpg
; screenshot_suffix   = time
; 截图间隔时长，s,m,h,d
; screenshot_interval = 1m
; ======== 推流录像 ==========
; record_path 录像保存路径, 不设置则不开启录像
; record_path     = ./record
; record_rule 录像匹配规则， 默认 */* 全部流录像， live/* live下的流才录像, 多个规则 | 分割
record_rule     = */*
; record_maxtime 最大单个录像时长 m,h,d, 不设置则不分段
; record_maxtime  = 1h
; record_filetype 录像文件格式,可选mp4, fmp4 , ts, flv, hls
; mp4, fmp4录制的文件都是.mp4后缀, 区别是, mp4格式通过http可以快速开始播放, fmp4需要下完全部内容才开始播放
; 录制过程中程序异常退出, mp4没有时机写入结尾导致无法播放, 而fmp4可以正常播放

; 录制开始和结束时会发送notify(postRecord,doneRecord)，用于记录录制的文件名, 录像后可通过http访问
; http://server_ip:8000/record/live/stream/2020-07-12-10-51-25.mp4
; http://server_ip:8000/record/live/stream/2020-07-12-10-51-25.flv
; http://server_ip:8000/record/live/stream/2020-07-12-10-51-25.ts
; 需要注意的是hls格式录制, 因为录制中会产生大量ts文件(每分钟一个), 为了方便管理, 路径是 /live/stream/生成日期/index.m3u8
; http://server_ip:8000/record/live/stream/2020-07-12-10-51-25/index.m3u8
record_filetype = hls


[auth]
; 鉴权密码，鉴权码生成规则
; 原地址 rtmp://192.168.0.8/live/stream
; 加密算法 先获取有效期时间戳（当前时间+30秒过期）1574318274,md5(/live/stream-1574318274-authkey@2019)
; 最终地址 rtmp://192.168.0.8/live/stream?sign=1574318274-5a1ee174233631793a4091badf4ffec5
auth_key      = authkey@2019
; 是否开启播放鉴权
; auth_play     = 1
; 是否开启推流鉴权
; auth_push     = 1
; 是否开启API鉴权, 打开后所有api调用需要设置header['authorization'] = login成功后返回的token
auth_api      = 1
; API鉴权用户名，login时以json格式提交
; {
; "username": "admin",
; "password": "21232f297a57a5a743894a0e4a801fc3"
; }
auth_api_user = admin
; API鉴权密码，login时需要传md5后的值, 默认密码为弱口令,请注意修改
auth_api_pass = admin
;auth_domain 验证域名,开启后,只有使用该域名访问才被允许,多个以|分隔
; auth_domain = 
; auth_nme 通过nme进行平台注册的密码验证
auth_nme = 123456

[rtmp]
; rtmp协议端口
port       = 1935
; rtmp协议chunk size
chunk_size = 60000

[http]
; http-flv/websocket-flv/hls协议端口
; API接口, AdminPanel复用该端口
port = 8000

[https]
; https-flv/wss-flv/hls/nme 协议端口
port      = 8443
key_file  = key.pem
cert_file = cert.pem

[hls]
; hls_path 切片临时存放路径, 必须填入有效且可写入的路径. 若不设置,则不会生成hls切片
; hls_path = hls
; hls_time 切片时间, 单位秒, 默认2
; 经过这段时间后,将在下一个关键帧上剪切片段. 并不代表肯定会以这个设定值而切片,还要根据关键帧间隔而定.
; 低切片可有效降低hls延迟, 但也需要推流端使用固定的低关键帧间隔编码, 如果不固定关键帧间隔,会造成视频卡顿
hls_time = 2
; hls_list 最大播放条目, 默认3
hls_list = 3

[kmp]
; kmp协议监听, UDP端口
port = 6935

[jt1078]
; JT1078 流媒体服务, 无信令控制. 
; 用户需自行实现JT808, 配置设备ip和端口后, 本服务即可接收音视频流

; jt1078 子码率配置端口
; sub_port   = 6660
; jt1078 主码流配置端口
; main_port  = 6661
; jt1078 单音频监听流配置端口
; audio_port = 6662

[gb28181]
; GB28181 直播服务, 只做实时视频上云, 无录像调用\无云台控制\无级联\无对讲
; 打开sip_port和rtp_port后开启服务

; sip_id SIP服务器ID
sip_id = 34020000002000000001
; sip_domain SIP服务器域
sip_domain = 3402000000
; sip_ip SIP服务器地址
sip_ip = 171.211.15.189
; sip_port  SIP服务器端口,UDP 
; sip_port = 5060
; sip_pass  SIP服务器认证密码
sip_pass = 123456
; rtp_port  RTP服务器复用端口,UDP
rtp_port = 5080

[cluster]
; type 集群类型
; pull型从远端拉所有流到本地
; push型推送所有流到远端
; 不设置该值则不启用
; type = pull
; node 远端节点
; 包括协议,ip,端口号,可以配置多个, 用|分隔.
; 当前支持RTMP和KMP协议
node = rtmp://192.168.0.2:1935 | kmp://192.168.0.3:6935
; args 请求参数
; go模板型的参数生成器,主要用于接入开启了url鉴权的主机,目前支持NMS和阿里云
args = """{{$ts := gents 30}}{{$x := printf `/%s/%s-%d-%s` .App .Name $ts `authkey@2019`}}sign={{$ts}}-{{md5 $x}}"""

